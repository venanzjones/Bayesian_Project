// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace out120_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 120> locations_array__ =
  {" (found before start of program)",
  " (in 'out120.stan', line 35, column 2 to column 17)",
  " (in 'out120.stan', line 36, column 2 to column 24)",
  " (in 'out120.stan', line 37, column 2 to column 20)",
  " (in 'out120.stan', line 38, column 2 to column 22)",
  " (in 'out120.stan', line 39, column 2 to column 24)",
  " (in 'out120.stan', line 40, column 2 to column 25)",
  " (in 'out120.stan', line 42, column 2 to column 31)",
  " (in 'out120.stan', line 47, column 2 to column 19)",
  " (in 'out120.stan', line 48, column 2 to column 20)",
  " (in 'out120.stan', line 49, column 2 to column 22)",
  " (in 'out120.stan', line 51, column 2 to column 22)",
  " (in 'out120.stan', line 53, column 2 to column 29)",
  " (in 'out120.stan', line 54, column 2 to column 30)",
  " (in 'out120.stan', line 55, column 2 to column 32)",
  " (in 'out120.stan', line 57, column 2 to column 32)",
  " (in 'out120.stan', line 59, column 2 to column 58)",
  " (in 'out120.stan', line 60, column 2 to column 63)",
  " (in 'out120.stan', line 109, column 2 to column 20)",
  " (in 'out120.stan', line 110, column 2 to column 19)",
  " (in 'out120.stan', line 111, column 2 to column 29)",
  " (in 'out120.stan', line 131, column 2 to column 14)",
  " (in 'out120.stan', line 63, column 2 to column 21)",
  " (in 'out120.stan', line 65, column 4 to column 64)",
  " (in 'out120.stan', line 64, column 17 to line 66, column 3)",
  " (in 'out120.stan', line 64, column 2 to line 66, column 3)",
  " (in 'out120.stan', line 67, column 2 to column 63)",
  " (in 'out120.stan', line 68, column 2 to column 36)",
  " (in 'out120.stan', line 70, column 2 to column 31)",
  " (in 'out120.stan', line 72, column 4 to column 75)",
  " (in 'out120.stan', line 71, column 22 to line 73, column 3)",
  " (in 'out120.stan', line 71, column 2 to line 73, column 3)",
  " (in 'out120.stan', line 74, column 2 to column 88)",
  " (in 'out120.stan', line 75, column 2 to column 51)",
  " (in 'out120.stan', line 114, column 4 to column 52)",
  " (in 'out120.stan', line 113, column 16 to line 115, column 3)",
  " (in 'out120.stan', line 113, column 2 to line 115, column 3)",
  " (in 'out120.stan', line 134, column 2 to column 28)",
  " (in 'out120.stan', line 136, column 6 to column 38)",
  " (in 'out120.stan', line 135, column 34 to line 137, column 5)",
  " (in 'out120.stan', line 135, column 4 to line 137, column 5)",
  " (in 'out120.stan', line 137, column 5 to column 6)",
  " (in 'out120.stan', line 138, column 4 to column 23)",
  " (in 'out120.stan', line 133, column 15 to line 139, column 3)",
  " (in 'out120.stan', line 133, column 2 to line 139, column 3)",
  " (in 'out120.stan', line 142, column 4 to column 35)",
  " (in 'out120.stan', line 144, column 6 to column 43)",
  " (in 'out120.stan', line 143, column 38 to line 145, column 5)",
  " (in 'out120.stan', line 143, column 4 to line 145, column 5)",
  " (in 'out120.stan', line 145, column 5 to column 6)",
  " (in 'out120.stan', line 146, column 4 to column 28)",
  " (in 'out120.stan', line 141, column 20 to line 147, column 3)",
  " (in 'out120.stan', line 141, column 2 to line 147, column 3)",
  " (in 'out120.stan', line 93, column 2 to column 22)",
  " (in 'out120.stan', line 95, column 4 to column 30)",
  " (in 'out120.stan', line 94, column 17 to line 96, column 3)",
  " (in 'out120.stan', line 94, column 2 to line 96, column 3)",
  " (in 'out120.stan', line 96, column 3 to column 4)",
  " (in 'out120.stan', line 98, column 2 to column 20)",
  " (in 'out120.stan', line 99, column 2 to column 26)",
  " (in 'out120.stan', line 100, column 2 to column 58)",
  " (in 'out120.stan', line 101, column 2 to column 26)",
  " (in 'out120.stan', line 102, column 2 to column 27)",
  " (in 'out120.stan', line 104, column 2 to column 31)",
  " (in 'out120.stan', line 4, column 2 to column 17)",
  " (in 'out120.stan', line 5, column 2 to column 22)",
  " (in 'out120.stan', line 6, column 2 to column 17)",
  " (in 'out120.stan', line 7, column 2 to column 22)",
  " (in 'out120.stan', line 8, column 2 to column 25)",
  " (in 'out120.stan', line 10, column 8 to column 9)",
  " (in 'out120.stan', line 10, column 2 to column 32)",
  " (in 'out120.stan', line 11, column 8 to column 9)",
  " (in 'out120.stan', line 11, column 2 to column 29)",
  " (in 'out120.stan', line 12, column 8 to column 9)",
  " (in 'out120.stan', line 12, column 2 to column 34)",
  " (in 'out120.stan', line 14, column 8 to column 14)",
  " (in 'out120.stan', line 14, column 2 to column 42)",
  " (in 'out120.stan', line 15, column 8 to column 14)",
  " (in 'out120.stan', line 15, column 2 to column 39)",
  " (in 'out120.stan', line 16, column 8 to column 14)",
  " (in 'out120.stan', line 16, column 2 to column 44)",
  " (in 'out120.stan', line 18, column 8 to column 9)",
  " (in 'out120.stan', line 18, column 2 to column 26)",
  " (in 'out120.stan', line 20, column 9 to column 10)",
  " (in 'out120.stan', line 20, column 12 to column 13)",
  " (in 'out120.stan', line 20, column 2 to column 17)",
  " (in 'out120.stan', line 21, column 9 to column 15)",
  " (in 'out120.stan', line 21, column 17 to column 18)",
  " (in 'out120.stan', line 21, column 2 to column 27)",
  " (in 'out120.stan', line 23, column 2 to column 11)",
  " (in 'out120.stan', line 24, column 9 to column 18)",
  " (in 'out120.stan', line 24, column 20 to column 29)",
  " (in 'out120.stan', line 24, column 2 to column 41)",
  " (in 'out120.stan', line 26, column 9 to column 10)",
  " (in 'out120.stan', line 26, column 2 to column 29)",
  " (in 'out120.stan', line 27, column 9 to column 15)",
  " (in 'out120.stan', line 27, column 2 to column 35)",
  " (in 'out120.stan', line 31, column 9 to column 18)",
  " (in 'out120.stan', line 31, column 19 to column 28)",
  " (in 'out120.stan', line 31, column 2 to column 60)",
  " (in 'out120.stan', line 35, column 9 to column 10)",
  " (in 'out120.stan', line 36, column 9 to column 18)",
  " (in 'out120.stan', line 37, column 9 to column 15)",
  " (in 'out120.stan', line 38, column 9 to column 18)",
  " (in 'out120.stan', line 42, column 9 to column 18)",
  " (in 'out120.stan', line 47, column 9 to column 10)",
  " (in 'out120.stan', line 48, column 9 to column 10)",
  " (in 'out120.stan', line 49, column 9 to column 10)",
  " (in 'out120.stan', line 51, column 9 to column 10)",
  " (in 'out120.stan', line 53, column 9 to column 15)",
  " (in 'out120.stan', line 54, column 9 to column 15)",
  " (in 'out120.stan', line 55, column 9 to column 15)",
  " (in 'out120.stan', line 57, column 9 to column 15)",
  " (in 'out120.stan', line 59, column 9 to column 18)",
  " (in 'out120.stan', line 59, column 19 to column 28)",
  " (in 'out120.stan', line 60, column 9 to column 18)",
  " (in 'out120.stan', line 60, column 19 to column 28)",
  " (in 'out120.stan', line 109, column 9 to column 10)",
  " (in 'out120.stan', line 110, column 9 to column 10)",
  " (in 'out120.stan', line 111, column 9 to column 15)"};
class out120_model final : public model_base_crtp<out120_model> {
 private:
  int N;
  int N_miss;
  int P;
  int nyears;
  int nstations;
  std::vector<int> station;
  std::vector<int> year;
  std::vector<int> max_month;
  std::vector<int> station_miss;
  std::vector<int> year_miss;
  std::vector<int> max_month_miss;
  std::vector<int> y;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> X_miss_data__;
  double phi;
  Eigen::Matrix<double,-1,-1> distances_data__;
  Eigen::Matrix<double,-1,1> dummy_luglio_obs_data__;
  Eigen::Matrix<double,-1,1> dummy_luglio_miss_data__;
  Eigen::Matrix<double,-1,-1> H_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_miss{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> distances{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> dummy_luglio_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> dummy_luglio_miss{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> H{nullptr, 0, 0};
 public:
  ~out120_model() {}
  out120_model(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "out120_model_namespace::out120_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 64;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 64;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "N_miss", "int",
        std::vector<size_t>{});
      N_miss = std::numeric_limits<int>::min();
      current_statement__ = 65;
      N_miss = context__.vals_i("N_miss")[(1 - 1)];
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "N_miss", N_miss, 0);
      current_statement__ = 66;
      context__.validate_dims("data initialization", "P", "int",
        std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      current_statement__ = 66;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "P", P, 0);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "nyears", "int",
        std::vector<size_t>{});
      nyears = std::numeric_limits<int>::min();
      current_statement__ = 67;
      nyears = context__.vals_i("nyears")[(1 - 1)];
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "nyears", nyears, 0);
      current_statement__ = 68;
      context__.validate_dims("data initialization", "nstations", "int",
        std::vector<size_t>{});
      nstations = std::numeric_limits<int>::min();
      current_statement__ = 68;
      nstations = context__.vals_i("nstations")[(1 - 1)];
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "nstations", nstations,
        0);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("station", "N", N);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "station", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      station = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 70;
      station = context__.vals_i("station");
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "station", station, 0);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("year", "N", N);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "year", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      year = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 72;
      year = context__.vals_i("year");
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "year", year, 0);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("max_month", "N", N);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "max_month", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      max_month = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 74;
      max_month = context__.vals_i("max_month");
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "max_month", max_month,
        0);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("station_miss", "N_miss",
        N_miss);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "station_miss", "int",
        std::vector<size_t>{static_cast<size_t>(N_miss)});
      station_miss = std::vector<int>(N_miss,
                       std::numeric_limits<int>::min());
      current_statement__ = 76;
      station_miss = context__.vals_i("station_miss");
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "station_miss",
        station_miss, 0);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("year_miss", "N_miss", N_miss);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "year_miss", "int",
        std::vector<size_t>{static_cast<size_t>(N_miss)});
      year_miss = std::vector<int>(N_miss, std::numeric_limits<int>::min());
      current_statement__ = 78;
      year_miss = context__.vals_i("year_miss");
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "year_miss", year_miss,
        0);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("max_month_miss", "N_miss",
        N_miss);
      current_statement__ = 80;
      context__.validate_dims("data initialization", "max_month_miss", "int",
        std::vector<size_t>{static_cast<size_t>(N_miss)});
      max_month_miss = std::vector<int>(N_miss,
                         std::numeric_limits<int>::min());
      current_statement__ = 80;
      max_month_miss = context__.vals_i("max_month_miss");
      current_statement__ = 80;
      stan::math::check_greater_or_equal(function__, "max_month_miss",
        max_month_miss, 0);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 82;
      y = context__.vals_i("y");
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("X", "P", P);
      current_statement__ = 85;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(P)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, P,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, P);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 85;
        X_flat__ = context__.vals_r("X");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 86;
      stan::math::validate_non_negative_index("X_miss", "N_miss", N_miss);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("X_miss", "P", P);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "X_miss", "double",
        std::vector<size_t>{static_cast<size_t>(N_miss),
          static_cast<size_t>(P)});
      X_miss_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_miss, P,
                        std::numeric_limits<double>::quiet_NaN());
      new (&X_miss)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_miss_data__.data(), N_miss,
        P);
      {
        std::vector<local_scalar_t__> X_miss_flat__;
        current_statement__ = 88;
        X_miss_flat__ = context__.vals_r("X_miss");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_miss; ++sym2__) {
            stan::model::assign(X_miss, X_miss_flat__[(pos__ - 1)],
              "assigning variable X_miss", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 89;
      context__.validate_dims("data initialization", "phi", "double",
        std::vector<size_t>{});
      phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 89;
      phi = context__.vals_r("phi")[(1 - 1)];
      current_statement__ = 90;
      stan::math::validate_non_negative_index("distances", "nstations",
        nstations);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("distances", "nstations",
        nstations);
      current_statement__ = 92;
      context__.validate_dims("data initialization", "distances", "double",
        std::vector<size_t>{static_cast<size_t>(nstations),
          static_cast<size_t>(nstations)});
      distances_data__ = Eigen::Matrix<double,-1,-1>::Constant(nstations,
                           nstations,
                           std::numeric_limits<double>::quiet_NaN());
      new (&distances)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(distances_data__.data(),
        nstations, nstations);
      {
        std::vector<local_scalar_t__> distances_flat__;
        current_statement__ = 92;
        distances_flat__ = context__.vals_r("distances");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nstations; ++sym2__) {
            stan::model::assign(distances, distances_flat__[(pos__ - 1)],
              "assigning variable distances", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 93;
      stan::math::validate_non_negative_index("dummy_luglio_obs", "N", N);
      current_statement__ = 94;
      context__.validate_dims("data initialization", "dummy_luglio_obs",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      dummy_luglio_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&dummy_luglio_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(dummy_luglio_obs_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> dummy_luglio_obs_flat__;
        current_statement__ = 94;
        dummy_luglio_obs_flat__ = context__.vals_r("dummy_luglio_obs");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(dummy_luglio_obs,
            dummy_luglio_obs_flat__[(pos__ - 1)],
            "assigning variable dummy_luglio_obs",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 95;
      stan::math::validate_non_negative_index("dummy_luglio_miss", "N_miss",
        N_miss);
      current_statement__ = 96;
      context__.validate_dims("data initialization", "dummy_luglio_miss",
        "double", std::vector<size_t>{static_cast<size_t>(N_miss)});
      dummy_luglio_miss_data__ = Eigen::Matrix<double,-1,1>::Constant(N_miss,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&dummy_luglio_miss)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(dummy_luglio_miss_data__.data(),
        N_miss);
      {
        std::vector<local_scalar_t__> dummy_luglio_miss_flat__;
        current_statement__ = 96;
        dummy_luglio_miss_flat__ = context__.vals_r("dummy_luglio_miss");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
          stan::model::assign(dummy_luglio_miss,
            dummy_luglio_miss_flat__[(pos__ - 1)],
            "assigning variable dummy_luglio_miss",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 97;
      stan::math::validate_non_negative_index("H", "nstations", nstations);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("H", "nstations", nstations);
      current_statement__ = 99;
      H_data__ = Eigen::Matrix<double,-1,-1>::Constant(nstations, nstations,
                   std::numeric_limits<double>::quiet_NaN());
      new (&H) Eigen::Map<Eigen::Matrix<double,-1,-1>>(H_data__.data(),
        nstations, nstations);
      current_statement__ = 99;
      stan::model::assign(H,
        stan::math::exp(stan::math::multiply(-((1 / phi)), distances)),
        "assigning variable H");
      current_statement__ = 100;
      stan::math::validate_non_negative_index("beta", "P", P);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("eta", "nstations", nstations);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("xi", "nyears", nyears);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("w", "nstations", nstations);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("dummy_beta", "nstations",
        nstations);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("lambda", "N", N);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("fix_eff", "N", N);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("dummy_eff", "N", N);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("intercept", "N", N);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("lambda_miss", "N_miss", N_miss);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("fix_eff_miss", "N_miss",
        N_miss);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("dummy_eff_miss", "N_miss",
        N_miss);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("intercept_miss", "N_miss",
        N_miss);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("Sigma_s", "nstations",
        nstations);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("Sigma_s", "nstations",
        nstations);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("Lw", "nstations", nstations);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("Lw", "nstations", nstations);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("log_lik", "N", N);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("y_pred", "N", N);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("y_pred_miss", "N_miss", N_miss);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = P + nstations + nyears + nstations + 1 + 1 + nstations;
  }
  inline std::string model_name() const final {
    return "out120_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=out120.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "out120_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      current_statement__ = 2;
      eta = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(nstations);
      Eigen::Matrix<local_scalar_t__,-1,1> xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nyears, DUMMY_VAR__);
      current_statement__ = 3;
      xi = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nyears);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      current_statement__ = 4;
      w = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nstations);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 5;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 6;
      sigma0 = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> dummy_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      current_statement__ = 7;
      dummy_beta = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(nstations);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fix_eff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> dummy_eff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fix_eff_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> dummy_eff_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> intercept_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma_s =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nstations, nstations,
          DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(Sigma_s, stan::math::multiply((sigma * sigma), H),
        "assigning variable Sigma_s");
      Eigen::Matrix<local_scalar_t__,-1,-1> Lw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nstations, nstations,
          DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(Lw, stan::math::cholesky_decompose(Sigma_s),
        "assigning variable Lw");
      current_statement__ = 22;
      stan::model::assign(fix_eff, stan::math::multiply(X, beta),
        "assigning variable fix_eff");
      current_statement__ = 25;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        stan::model::assign(dummy_eff,
          (stan::model::rvalue(dummy_luglio_obs, "dummy_luglio_obs",
             stan::model::index_uni(i)) *
          stan::model::rvalue(dummy_beta, "dummy_beta",
            stan::model::index_uni(
              stan::model::rvalue(station, "station",
                stan::model::index_uni(i))))),
          "assigning variable dummy_eff", stan::model::index_uni(i));
      }
      current_statement__ = 26;
      stan::model::assign(intercept,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(xi, "xi", stan::model::index_multi(year)),
              stan::model::rvalue(eta, "eta",
                stan::model::index_multi(station))),
            stan::model::rvalue(w, "w", stan::model::index_multi(station))),
          dummy_eff), "assigning variable intercept");
      current_statement__ = 27;
      stan::model::assign(lambda,
        stan::math::exp(stan::math::add(fix_eff, intercept)),
        "assigning variable lambda");
      current_statement__ = 28;
      stan::model::assign(fix_eff_miss, stan::math::multiply(X_miss, beta),
        "assigning variable fix_eff_miss");
      current_statement__ = 31;
      for (int i = 1; i <= N_miss; ++i) {
        current_statement__ = 29;
        stan::model::assign(dummy_eff_miss,
          (stan::model::rvalue(dummy_luglio_miss, "dummy_luglio_miss",
             stan::model::index_uni(i)) *
          stan::model::rvalue(dummy_beta, "dummy_beta",
            stan::model::index_uni(
              stan::model::rvalue(station_miss, "station_miss",
                stan::model::index_uni(i))))),
          "assigning variable dummy_eff_miss", stan::model::index_uni(i));
      }
      current_statement__ = 32;
      stan::model::assign(intercept_miss,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(xi, "xi",
                stan::model::index_multi(year_miss)),
              stan::model::rvalue(eta, "eta",
                stan::model::index_multi(station_miss))),
            stan::model::rvalue(w, "w",
              stan::model::index_multi(station_miss))), dummy_eff_miss),
        "assigning variable intercept_miss");
      current_statement__ = 33;
      stan::model::assign(lambda_miss,
        stan::math::exp(stan::math::add(fix_eff_miss, intercept_miss)),
        "assigning variable lambda_miss");
      {
        current_statement__ = 53;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 2));
        current_statement__ = 56;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 54;
          lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(lambda, "lambda",
                             stan::model::index_uni(i))));
        }
        current_statement__ = 58;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(xi, 0, 2));
        current_statement__ = 59;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(eta, 0, sigma0));
        current_statement__ = 60;
        lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<propto__>(w,
                         stan::math::rep_vector(0, nstations), Lw));
        current_statement__ = 61;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sigma, 2, 2));
        current_statement__ = 62;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sigma0, 2, 2));
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(dummy_beta, -(0.5),
                         1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "out120_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      current_statement__ = 2;
      eta = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(nstations);
      Eigen::Matrix<local_scalar_t__,-1,1> xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nyears, DUMMY_VAR__);
      current_statement__ = 3;
      xi = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nyears);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      current_statement__ = 4;
      w = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nstations);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 5;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 6;
      sigma0 = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> dummy_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      current_statement__ = 7;
      dummy_beta = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(nstations);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fix_eff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> dummy_eff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fix_eff_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> dummy_eff_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> intercept_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma_s =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nstations, nstations,
          DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(Sigma_s, stan::math::multiply((sigma * sigma), H),
        "assigning variable Sigma_s");
      Eigen::Matrix<local_scalar_t__,-1,-1> Lw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nstations, nstations,
          DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(Lw, stan::math::cholesky_decompose(Sigma_s),
        "assigning variable Lw");
      current_statement__ = 22;
      stan::model::assign(fix_eff, stan::math::multiply(X, beta),
        "assigning variable fix_eff");
      current_statement__ = 25;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        stan::model::assign(dummy_eff,
          (stan::model::rvalue(dummy_luglio_obs, "dummy_luglio_obs",
             stan::model::index_uni(i)) *
          stan::model::rvalue(dummy_beta, "dummy_beta",
            stan::model::index_uni(
              stan::model::rvalue(station, "station",
                stan::model::index_uni(i))))),
          "assigning variable dummy_eff", stan::model::index_uni(i));
      }
      current_statement__ = 26;
      stan::model::assign(intercept,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(xi, "xi", stan::model::index_multi(year)),
              stan::model::rvalue(eta, "eta",
                stan::model::index_multi(station))),
            stan::model::rvalue(w, "w", stan::model::index_multi(station))),
          dummy_eff), "assigning variable intercept");
      current_statement__ = 27;
      stan::model::assign(lambda,
        stan::math::exp(stan::math::add(fix_eff, intercept)),
        "assigning variable lambda");
      current_statement__ = 28;
      stan::model::assign(fix_eff_miss, stan::math::multiply(X_miss, beta),
        "assigning variable fix_eff_miss");
      current_statement__ = 31;
      for (int i = 1; i <= N_miss; ++i) {
        current_statement__ = 29;
        stan::model::assign(dummy_eff_miss,
          (stan::model::rvalue(dummy_luglio_miss, "dummy_luglio_miss",
             stan::model::index_uni(i)) *
          stan::model::rvalue(dummy_beta, "dummy_beta",
            stan::model::index_uni(
              stan::model::rvalue(station_miss, "station_miss",
                stan::model::index_uni(i))))),
          "assigning variable dummy_eff_miss", stan::model::index_uni(i));
      }
      current_statement__ = 32;
      stan::model::assign(intercept_miss,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(xi, "xi",
                stan::model::index_multi(year_miss)),
              stan::model::rvalue(eta, "eta",
                stan::model::index_multi(station_miss))),
            stan::model::rvalue(w, "w",
              stan::model::index_multi(station_miss))), dummy_eff_miss),
        "assigning variable intercept_miss");
      current_statement__ = 33;
      stan::model::assign(lambda_miss,
        stan::math::exp(stan::math::add(fix_eff_miss, intercept_miss)),
        "assigning variable lambda_miss");
      {
        current_statement__ = 53;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 2));
        current_statement__ = 56;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 54;
          lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(lambda, "lambda",
                             stan::model::index_uni(i))));
        }
        current_statement__ = 58;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(xi, 0, 2));
        current_statement__ = 59;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(eta, 0, sigma0));
        current_statement__ = 60;
        lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<propto__>(w,
                         stan::math::rep_vector(0, nstations), Lw));
        current_statement__ = 61;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sigma, 2, 2));
        current_statement__ = 62;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sigma0, 2, 2));
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(dummy_beta, -(0.5),
                         1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "out120_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(P,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      Eigen::Matrix<double,-1,1> eta =
        Eigen::Matrix<double,-1,1>::Constant(nstations,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      eta = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(nstations);
      Eigen::Matrix<double,-1,1> xi =
        Eigen::Matrix<double,-1,1>::Constant(nyears,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      xi = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nyears);
      Eigen::Matrix<double,-1,1> w =
        Eigen::Matrix<double,-1,1>::Constant(nstations,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      w = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nstations);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double sigma0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sigma0 = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> dummy_beta =
        Eigen::Matrix<double,-1,1>::Constant(nstations,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      dummy_beta = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(nstations);
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fix_eff =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> dummy_eff =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> intercept =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lambda_miss =
        Eigen::Matrix<double,-1,1>::Constant(N_miss,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fix_eff_miss =
        Eigen::Matrix<double,-1,1>::Constant(N_miss,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> dummy_eff_miss =
        Eigen::Matrix<double,-1,1>::Constant(N_miss,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> intercept_miss =
        Eigen::Matrix<double,-1,1>::Constant(N_miss,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Sigma_s =
        Eigen::Matrix<double,-1,-1>::Constant(nstations, nstations,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Lw =
        Eigen::Matrix<double,-1,-1>::Constant(nstations, nstations,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta);
      out__.write(eta);
      out__.write(xi);
      out__.write(w);
      out__.write(sigma);
      out__.write(sigma0);
      out__.write(dummy_beta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 16;
      stan::model::assign(Sigma_s, stan::math::multiply((sigma * sigma), H),
        "assigning variable Sigma_s");
      current_statement__ = 17;
      stan::model::assign(Lw, stan::math::cholesky_decompose(Sigma_s),
        "assigning variable Lw");
      current_statement__ = 22;
      stan::model::assign(fix_eff, stan::math::multiply(X, beta),
        "assigning variable fix_eff");
      current_statement__ = 25;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        stan::model::assign(dummy_eff,
          (stan::model::rvalue(dummy_luglio_obs, "dummy_luglio_obs",
             stan::model::index_uni(i)) *
          stan::model::rvalue(dummy_beta, "dummy_beta",
            stan::model::index_uni(
              stan::model::rvalue(station, "station",
                stan::model::index_uni(i))))),
          "assigning variable dummy_eff", stan::model::index_uni(i));
      }
      current_statement__ = 26;
      stan::model::assign(intercept,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(xi, "xi", stan::model::index_multi(year)),
              stan::model::rvalue(eta, "eta",
                stan::model::index_multi(station))),
            stan::model::rvalue(w, "w", stan::model::index_multi(station))),
          dummy_eff), "assigning variable intercept");
      current_statement__ = 27;
      stan::model::assign(lambda,
        stan::math::exp(stan::math::add(fix_eff, intercept)),
        "assigning variable lambda");
      current_statement__ = 28;
      stan::model::assign(fix_eff_miss, stan::math::multiply(X_miss, beta),
        "assigning variable fix_eff_miss");
      current_statement__ = 31;
      for (int i = 1; i <= N_miss; ++i) {
        current_statement__ = 29;
        stan::model::assign(dummy_eff_miss,
          (stan::model::rvalue(dummy_luglio_miss, "dummy_luglio_miss",
             stan::model::index_uni(i)) *
          stan::model::rvalue(dummy_beta, "dummy_beta",
            stan::model::index_uni(
              stan::model::rvalue(station_miss, "station_miss",
                stan::model::index_uni(i))))),
          "assigning variable dummy_eff_miss", stan::model::index_uni(i));
      }
      current_statement__ = 32;
      stan::model::assign(intercept_miss,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(xi, "xi",
                stan::model::index_multi(year_miss)),
              stan::model::rvalue(eta, "eta",
                stan::model::index_multi(station_miss))),
            stan::model::rvalue(w, "w",
              stan::model::index_multi(station_miss))), dummy_eff_miss),
        "assigning variable intercept_miss");
      current_statement__ = 33;
      stan::model::assign(lambda_miss,
        stan::math::exp(stan::math::add(fix_eff_miss, intercept_miss)),
        "assigning variable lambda_miss");
      if (emit_transformed_parameters__) {
        out__.write(lambda);
        out__.write(fix_eff);
        out__.write(dummy_eff);
        out__.write(intercept);
        out__.write(lambda_miss);
        out__.write(fix_eff_miss);
        out__.write(dummy_eff_miss);
        out__.write(intercept_miss);
        out__.write(Sigma_s);
        out__.write(Lw);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_pred =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_pred_miss =
        Eigen::Matrix<double,-1,1>::Constant(N_miss,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 36;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 34;
        stan::model::assign(log_lik,
          stan::math::poisson_lpmf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(i)),
            stan::model::rvalue(lambda, "lambda", stan::model::index_uni(i))),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      double y_temp = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 44;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 37;
        y_temp = (stan::model::rvalue(max_month, "max_month",
                    stan::model::index_uni(i))
          + 1);
        current_statement__ = 40;
        while (stan::math::logical_gt(y_temp,
                 stan::model::rvalue(max_month, "max_month",
                   stan::model::index_uni(i)))) {
          current_statement__ = 38;
          y_temp = stan::math::poisson_rng(
                     stan::model::rvalue(lambda, "lambda",
                       stan::model::index_uni(i)), base_rng__);
        }
        current_statement__ = 42;
        stan::model::assign(y_pred, y_temp, "assigning variable y_pred",
          stan::model::index_uni(i));
      }
      current_statement__ = 52;
      for (int i = 1; i <= N_miss; ++i) {
        current_statement__ = 45;
        y_temp = (stan::model::rvalue(max_month_miss, "max_month_miss",
                    stan::model::index_uni(i))
          + 1);
        current_statement__ = 48;
        while (stan::math::logical_gt(y_temp,
                 stan::model::rvalue(max_month_miss, "max_month_miss",
                   stan::model::index_uni(i)))) {
          current_statement__ = 46;
          y_temp = stan::math::poisson_rng(
                     stan::model::rvalue(lambda_miss, "lambda_miss",
                       stan::model::index_uni(i)), base_rng__);
        }
        current_statement__ = 50;
        stan::model::assign(y_pred_miss, y_temp,
          "assigning variable y_pred_miss", stan::model::index_uni(i));
      }
      out__.write(log_lik);
      out__.write(y_pred);
      out__.write(y_pred_miss);
      out__.write(y_temp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(P),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(eta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nstations),
        "assigning variable eta");
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nyears, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(xi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nyears),
        "assigning variable xi");
      out__.write(xi);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(w,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nstations),
        "assigning variable w");
      out__.write(w);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 5;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 6;
      sigma0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma0);
      Eigen::Matrix<local_scalar_t__,-1,1> dummy_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(dummy_beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nstations),
        "assigning variable dummy_beta");
      out__.write(dummy_beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(P)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{static_cast<size_t>(nstations)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "xi", "double",
        std::vector<size_t>{static_cast<size_t>(nyears)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "w", "double",
        std::vector<size_t>{static_cast<size_t>(nstations)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma0", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "dummy_beta",
        "double", std::vector<size_t>{static_cast<size_t>(nstations)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 2;
        eta_flat__ = context__.vals_r("eta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
          stan::model::assign(eta, eta_flat__[(pos__ - 1)],
            "assigning variable eta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nyears, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> xi_flat__;
        current_statement__ = 3;
        xi_flat__ = context__.vals_r("xi");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= nyears; ++sym1__) {
          stan::model::assign(xi, xi_flat__[(pos__ - 1)],
            "assigning variable xi", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(xi);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 4;
        w_flat__ = context__.vals_r("w");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
          stan::model::assign(w, w_flat__[(pos__ - 1)],
            "assigning variable w", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(w);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 5;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 6;
      sigma0 = context__.vals_r("sigma0")[(1 - 1)];
      out__.write_free_lb(0, sigma0);
      Eigen::Matrix<local_scalar_t__,-1,1> dummy_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nstations,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> dummy_beta_flat__;
        current_statement__ = 7;
        dummy_beta_flat__ = context__.vals_r("dummy_beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
          stan::model::assign(dummy_beta, dummy_beta_flat__[(pos__ - 1)],
            "assigning variable dummy_beta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(dummy_beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "eta", "xi", "w", "sigma",
                "sigma0", "dummy_beta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"lambda", "fix_eff", "dummy_eff", "intercept", "lambda_miss",
             "fix_eff_miss", "dummy_eff_miss", "intercept_miss", "Sigma_s",
             "Lw"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"log_lik", "y_pred", "y_pred_miss", "y_temp"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(P)},
                std::vector<size_t>{static_cast<size_t>(nstations)},
                std::vector<size_t>{static_cast<size_t>(nyears)},
                std::vector<size_t>{static_cast<size_t>(nstations)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(nstations)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N_miss)},
             std::vector<size_t>{static_cast<size_t>(N_miss)},
             std::vector<size_t>{static_cast<size_t>(N_miss)},
             std::vector<size_t>{static_cast<size_t>(N_miss)},
             std::vector<size_t>{static_cast<size_t>(nstations),
               static_cast<size_t>(nstations)},
             std::vector<size_t>{static_cast<size_t>(nstations),
               static_cast<size_t>(nstations)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N_miss)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nyears; ++sym1__) {
      param_names__.emplace_back(std::string() + "xi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigma0");
    for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
      param_names__.emplace_back(std::string() + "dummy_beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "fix_eff" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "dummy_eff" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "intercept" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_miss" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "fix_eff_miss" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "dummy_eff_miss" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "intercept_miss" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nstations; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_s" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nstations; ++sym2__) {
          param_names__.emplace_back(std::string() + "Lw" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred_miss" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "y_temp");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nyears; ++sym1__) {
      param_names__.emplace_back(std::string() + "xi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigma0");
    for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
      param_names__.emplace_back(std::string() + "dummy_beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "fix_eff" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "dummy_eff" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "intercept" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_miss" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "fix_eff_miss" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "dummy_eff_miss" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "intercept_miss" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nstations; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_s" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nstations; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nstations; ++sym2__) {
          param_names__.emplace_back(std::string() + "Lw" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred_miss" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "y_temp");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nstations) + "},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nyears) + "},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nstations) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dummy_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nstations) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fix_eff\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dummy_eff\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fix_eff_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dummy_eff_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"transformed_parameters\"},{\"name\":\"intercept_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_s\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nstations) + ",\"cols\":" + std::to_string(nstations) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Lw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nstations) + ",\"cols\":" + std::to_string(nstations) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_pred_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_temp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nstations) + "},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nyears) + "},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nstations) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dummy_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nstations) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fix_eff\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dummy_eff\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fix_eff_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dummy_eff_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"transformed_parameters\"},{\"name\":\"intercept_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_s\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nstations) + ",\"cols\":" + std::to_string(nstations) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Lw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nstations) + ",\"cols\":" + std::to_string(nstations) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_pred_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_temp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((P + nstations) + nyears) + nstations) +
      1) + 1) + nstations);
    const size_t num_transformed = emit_transformed_parameters * ((((((((((N
      + N) + N) + N) + N_miss) + N_miss) + N_miss) + N_miss) + (nstations *
      nstations)) + (nstations * nstations)));
    const size_t num_gen_quantities = emit_generated_quantities * ((((N + N)
      + N_miss) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((P + nstations) + nyears) + nstations) +
      1) + 1) + nstations);
    const size_t num_transformed = emit_transformed_parameters * ((((((((((N
      + N) + N) + N) + N_miss) + N_miss) + N_miss) + N_miss) + (nstations *
      nstations)) + (nstations * nstations)));
    const size_t num_gen_quantities = emit_generated_quantities * ((((N + N)
      + N_miss) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = out120_model_namespace::out120_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return out120_model_namespace::profiles__;
}
#endif
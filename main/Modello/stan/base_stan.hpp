// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace base_stan_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 50> locations_array__ =
  {" (found before start of program)",
  " (in 'base_stan.stan', line 31, column 2 to column 17)",
  " (in 'base_stan.stan', line 32, column 2 to column 31)",
  " (in 'base_stan.stan', line 36, column 2 to column 20)",
  " (in 'base_stan.stan', line 37, column 2 to column 21)",
  " (in 'base_stan.stan', line 57, column 1 to column 19)",
  " (in 'base_stan.stan', line 39, column 2 to column 22)",
  " (in 'base_stan.stan', line 40, column 2 to column 24)",
  " (in 'base_stan.stan', line 59, column 3 to line 62, column 54)",
  " (in 'base_stan.stan', line 63, column 4 to column 58)",
  " (in 'base_stan.stan', line 64, column 4 to column 53)",
  " (in 'base_stan.stan', line 58, column 14 to line 66, column 1)",
  " (in 'base_stan.stan', line 58, column 1 to line 66, column 1)",
  " (in 'base_stan.stan', line 44, column 2 to column 22)",
  " (in 'base_stan.stan', line 45, column 2 to column 25)",
  " (in 'base_stan.stan', line 47, column 0 to line 51, column 54)",
  " (in 'base_stan.stan', line 52, column 3 to column 51)",
  " (in 'base_stan.stan', line 53, column 3 to column 46)",
  " (in 'base_stan.stan', line 7, column 2 to column 17)",
  " (in 'base_stan.stan', line 8, column 2 to column 17)",
  " (in 'base_stan.stan', line 9, column 2 to column 22)",
  " (in 'base_stan.stan', line 10, column 2 to column 25)",
  " (in 'base_stan.stan', line 13, column 8 to column 9)",
  " (in 'base_stan.stan', line 13, column 2 to column 26)",
  " (in 'base_stan.stan', line 14, column 9 to column 10)",
  " (in 'base_stan.stan', line 14, column 12 to column 13)",
  " (in 'base_stan.stan', line 14, column 2 to column 17)",
  " (in 'base_stan.stan', line 15, column 2 to column 9)",
  " (in 'base_stan.stan', line 16, column 9 to column 11)",
  " (in 'base_stan.stan', line 16, column 13 to column 14)",
  " (in 'base_stan.stan', line 16, column 2 to column 19)",
  " (in 'base_stan.stan', line 20, column 2 to column 39)",
  " (in 'base_stan.stan', line 21, column 8 to column 10)",
  " (in 'base_stan.stan', line 21, column 2 to column 37)",
  " (in 'base_stan.stan', line 22, column 2 to column 20)",
  " (in 'base_stan.stan', line 24, column 19 to column 28)",
  " (in 'base_stan.stan', line 24, column 4 to column 28)",
  " (in 'base_stan.stan', line 25, column 4 to column 19)",
  " (in 'base_stan.stan', line 26, column 4 to column 32)",
  " (in 'base_stan.stan', line 23, column 17 to line 27, column 3)",
  " (in 'base_stan.stan', line 23, column 2 to line 27, column 3)",
  " (in 'base_stan.stan', line 31, column 9 to column 10)",
  " (in 'base_stan.stan', line 36, column 9 to column 11)",
  " (in 'base_stan.stan', line 37, column 9 to column 11)",
  " (in 'base_stan.stan', line 57, column 8 to column 9)",
  " (in 'C:/Users/39339/OneDrive/Desktop/I semestre/Bayesian_Project/main/Modello/stan/./spt_tools.stan', line 3, column 4, included from\n'base_stan.stan', line 3, column 4)",
  " (in 'C:/Users/39339/OneDrive/Desktop/I semestre/Bayesian_Project/main/Modello/stan/./spt_tools.stan', line 5, column 6, included from\n'base_stan.stan', line 3, column 4)",
  " (in 'C:/Users/39339/OneDrive/Desktop/I semestre/Bayesian_Project/main/Modello/stan/./spt_tools.stan', line 4, column 4, included from\n'base_stan.stan', line 3, column 4)",
  " (in 'C:/Users/39339/OneDrive/Desktop/I semestre/Bayesian_Project/main/Modello/stan/./spt_tools.stan', line 6, column 4, included from\n'base_stan.stan', line 3, column 4)",
  " (in 'C:/Users/39339/OneDrive/Desktop/I semestre/Bayesian_Project/main/Modello/stan/./spt_tools.stan', line 2, column 29, included from\n'base_stan.stan', line 3, column 4)"};
template <typename T0__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>>* = nullptr>
int num_zeros(const T0__& y, std::ostream* pstream__);
// int num_zeros(array[] int)
template <typename T0__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>>*>
int num_zeros(const T0__& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int sum = std::numeric_limits<int>::min();
    current_statement__ = 45;
    sum = 0;
    current_statement__ = 47;
    for (int n = 1; n <= stan::math::size(y); ++n) {
      current_statement__ = 46;
      sum = (sum +
        stan::math::logical_eq(
          stan::model::rvalue(y, "y", stan::model::index_uni(n)), 0));
    }
    current_statement__ = 48;
    return sum;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class base_stan_model final : public model_base_crtp<base_stan_model> {
 private:
  int N;
  int P;
  int nyears;
  int nstations;
  std::vector<int> y;
  Eigen::Matrix<double,-1,-1> X_data__;
  int N1;
  Eigen::Matrix<double,-1,-1> X1_data__;
  int N_zero;
  std::vector<int> y_nonzero;
  int N_nonzero;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X1{nullptr, 0, 0};
 public:
  ~base_stan_model() {}
  base_stan_model(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "base_stan_model_namespace::base_stan_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 18;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 18;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "P", "int",
        std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      current_statement__ = 19;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "P", P, 1);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "nyears", "int",
        std::vector<size_t>{});
      nyears = std::numeric_limits<int>::min();
      current_statement__ = 20;
      nyears = context__.vals_i("nyears")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "nyears", nyears, 1);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "nstations", "int",
        std::vector<size_t>{});
      nstations = std::numeric_limits<int>::min();
      current_statement__ = 21;
      nstations = context__.vals_i("nstations")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "nstations", nstations,
        1);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 23;
      y = context__.vals_i("y");
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("X", "P", P);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(P)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, P,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, P);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 26;
        X_flat__ = context__.vals_r("X");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 27;
      context__.validate_dims("data initialization", "N1", "int",
        std::vector<size_t>{});
      N1 = std::numeric_limits<int>::min();
      current_statement__ = 27;
      N1 = context__.vals_i("N1")[(1 - 1)];
      current_statement__ = 28;
      stan::math::validate_non_negative_index("X1", "N1", N1);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("X1", "P", P);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "X1", "double",
        std::vector<size_t>{static_cast<size_t>(N1), static_cast<size_t>(P)});
      X1_data__ = Eigen::Matrix<double,-1,-1>::Constant(N1, P,
                    std::numeric_limits<double>::quiet_NaN());
      new (&X1) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X1_data__.data(), N1,
        P);
      {
        std::vector<local_scalar_t__> X1_flat__;
        current_statement__ = 30;
        X1_flat__ = context__.vals_r("X1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N1; ++sym2__) {
            stan::model::assign(X1, X1_flat__[(pos__ - 1)],
              "assigning variable X1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 31;
      N_zero = std::numeric_limits<int>::min();
      current_statement__ = 31;
      N_zero = num_zeros(y, pstream__);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("y_nonzero", "N1", N1);
      current_statement__ = 33;
      y_nonzero = std::vector<int>(N1, std::numeric_limits<int>::min());
      current_statement__ = 34;
      N_nonzero = std::numeric_limits<int>::min();
      current_statement__ = 34;
      N_nonzero = 0;
      current_statement__ = 40;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 36;
        if (stan::math::logical_eq(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)), 0)) {
          continue;
        }
        current_statement__ = 37;
        N_nonzero = (N_nonzero + 1);
        current_statement__ = 38;
        stan::model::assign(y_nonzero,
          stan::model::rvalue(y, "y", stan::model::index_uni(n)),
          "assigning variable y_nonzero", stan::model::index_uni(N_nonzero));
      }
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "N_zero", N_zero, 0);
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "y_nonzero", y_nonzero,
        1);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("beta", "P", P);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("lambda", "N1", N1);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("fix_eff", "N1", N1);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = P + 1;
  }
  inline std::string model_name() const final {
    return "base_stan_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=base_stan.stan --include-paths=C:/Users/39339/OneDrive/Desktop/I semestre/Bayesian_Project/main/Modello/stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "base_stan_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 2;
      theta = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N1, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fix_eff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N1, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(fix_eff, stan::math::multiply(X1, beta),
        "assigning variable fix_eff");
      current_statement__ = 7;
      stan::model::assign(lambda, stan::math::exp(fix_eff),
        "assigning variable lambda");
      {
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 2));
        current_statement__ = 14;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(theta, 0.5, 0.5));
        current_statement__ = 15;
        lp_accum__.add((N_zero *
          stan::math::log_sum_exp(
            stan::math::bernoulli_lpmf<false>(1, theta),
            (stan::math::bernoulli_lpmf<false>(0, theta) +
            stan::math::poisson_lpmf<false>(0, lambda)))));
        current_statement__ = 16;
        lp_accum__.add((N_nonzero *
          stan::math::bernoulli_lpmf<false>(0, theta)));
        current_statement__ = 17;
        lp_accum__.add(stan::math::poisson_lpmf<false>(y_nonzero, lambda));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "base_stan_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 2;
      theta = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N1, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fix_eff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N1, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(fix_eff, stan::math::multiply(X1, beta),
        "assigning variable fix_eff");
      current_statement__ = 7;
      stan::model::assign(lambda, stan::math::exp(fix_eff),
        "assigning variable lambda");
      {
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 2));
        current_statement__ = 14;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(theta, 0.5, 0.5));
        current_statement__ = 15;
        lp_accum__.add((N_zero *
          stan::math::log_sum_exp(
            stan::math::bernoulli_lpmf<false>(1, theta),
            (stan::math::bernoulli_lpmf<false>(0, theta) +
            stan::math::poisson_lpmf<false>(0, lambda)))));
        current_statement__ = 16;
        lp_accum__.add((N_nonzero *
          stan::math::bernoulli_lpmf<false>(0, theta)));
        current_statement__ = 17;
        lp_accum__.add(stan::math::poisson_lpmf<false>(y_nonzero, lambda));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "base_stan_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(P,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      double theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      theta = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(N1,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fix_eff =
        Eigen::Matrix<double,-1,1>::Constant(N1,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta);
      out__.write(theta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      stan::model::assign(fix_eff, stan::math::multiply(X1, beta),
        "assigning variable fix_eff");
      current_statement__ = 7;
      stan::model::assign(lambda, stan::math::exp(fix_eff),
        "assigning variable lambda");
      if (emit_transformed_parameters__) {
        out__.write(lambda);
        out__.write(fix_eff);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 8;
        stan::model::assign(log_lik, (N_zero *
          stan::math::log_sum_exp(
            stan::math::bernoulli_lpmf<false>(1, theta),
            (stan::math::bernoulli_lpmf<false>(0, theta) +
            stan::math::poisson_lpmf<false>(0, lambda)))),
          "assigning variable log_lik", stan::model::index_uni(i));
        current_statement__ = 9;
        stan::model::assign(log_lik, (N_nonzero *
          stan::math::bernoulli_lpmf<false>(0, theta)),
          "assigning variable log_lik", stan::model::index_uni(i));
        current_statement__ = 10;
        stan::model::assign(log_lik,
          stan::math::poisson_lpmf<false>(y_nonzero, lambda),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(P),
        "assigning variable beta");
      out__.write(beta);
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 2;
      theta = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(P)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 2;
      theta = context__.vals_r("theta")[(1 - 1)];
      out__.write_free_lub(0, 1, theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "theta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"lambda", "fix_eff"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(P)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N1)},
             std::vector<size_t>{static_cast<size_t>(N1)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "theta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N1; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N1; ++sym1__) {
        param_names__.emplace_back(std::string() + "fix_eff" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "theta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N1; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N1; ++sym1__) {
        param_names__.emplace_back(std::string() + "fix_eff" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fix_eff\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fix_eff\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (P + 1);
    const size_t num_transformed = emit_transformed_parameters * ((N1 + N1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (P + 1);
    const size_t num_transformed = emit_transformed_parameters * ((N1 + N1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = base_stan_model_namespace::base_stan_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return base_stan_model_namespace::profiles__;
}
#endif